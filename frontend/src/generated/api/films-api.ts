/* tslint:disable */
/* eslint-disable */
/**
 * infilmation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Film } from '../models';
// @ts-ignore
import { FilmIn } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { SearchResult } from '../models';
/**
 * FilmsApi - axios parameter creator
 * @export
 */
export const FilmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new film.  Args:     film_request: a `FilmIn` instance  Returns:     a `Film` object
         * @summary Create Film
         * @param {FilmIn} filmIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFilmApiV1FilmsPost: async (filmIn: FilmIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filmIn' is not null or undefined
            assertParamExists('createFilmApiV1FilmsPost', 'filmIn', filmIn)
            const localVarPath = `/api/v1/films/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filmIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Filter films by multiple `imdb_id`.  Args:     imdb_ids: a list of `imdb_id` queries  Returns:     a list of filtered `Film` objects
         * @summary Get Films
         * @param {Array<string>} [imdbIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilmsApiV1FilmsGet: async (imdbIds?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/films/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (imdbIds) {
                localVarQueryParameter['imdb_ids'] = imdbIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for a film from a given query.  Args:     query: the query string  Returns:     a list of search results
         * @summary Search
         * @param {string} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApiV1FilmsSearchGet: async (query: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchApiV1FilmsSearchGet', 'query', query)
            const localVarPath = `/api/v1/films/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilmsApi - functional programming interface
 * @export
 */
export const FilmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilmsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new film.  Args:     film_request: a `FilmIn` instance  Returns:     a `Film` object
         * @summary Create Film
         * @param {FilmIn} filmIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFilmApiV1FilmsPost(filmIn: FilmIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Film>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFilmApiV1FilmsPost(filmIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Filter films by multiple `imdb_id`.  Args:     imdb_ids: a list of `imdb_id` queries  Returns:     a list of filtered `Film` objects
         * @summary Get Films
         * @param {Array<string>} [imdbIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilmsApiV1FilmsGet(imdbIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Film>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFilmsApiV1FilmsGet(imdbIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for a film from a given query.  Args:     query: the query string  Returns:     a list of search results
         * @summary Search
         * @param {string} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchApiV1FilmsSearchGet(query: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchApiV1FilmsSearchGet(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilmsApi - factory interface
 * @export
 */
export const FilmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilmsApiFp(configuration)
    return {
        /**
         * Create a new film.  Args:     film_request: a `FilmIn` instance  Returns:     a `Film` object
         * @summary Create Film
         * @param {FilmIn} filmIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFilmApiV1FilmsPost(filmIn: FilmIn, options?: any): AxiosPromise<Film> {
            return localVarFp.createFilmApiV1FilmsPost(filmIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Filter films by multiple `imdb_id`.  Args:     imdb_ids: a list of `imdb_id` queries  Returns:     a list of filtered `Film` objects
         * @summary Get Films
         * @param {Array<string>} [imdbIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilmsApiV1FilmsGet(imdbIds?: Array<string>, options?: any): AxiosPromise<Array<Film>> {
            return localVarFp.getFilmsApiV1FilmsGet(imdbIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for a film from a given query.  Args:     query: the query string  Returns:     a list of search results
         * @summary Search
         * @param {string} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchApiV1FilmsSearchGet(query: string, options?: any): AxiosPromise<Array<SearchResult>> {
            return localVarFp.searchApiV1FilmsSearchGet(query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFilmApiV1FilmsPost operation in FilmsApi.
 * @export
 * @interface FilmsApiCreateFilmApiV1FilmsPostRequest
 */
export interface FilmsApiCreateFilmApiV1FilmsPostRequest {
    /**
     * 
     * @type {FilmIn}
     * @memberof FilmsApiCreateFilmApiV1FilmsPost
     */
    readonly filmIn: FilmIn
}

/**
 * Request parameters for getFilmsApiV1FilmsGet operation in FilmsApi.
 * @export
 * @interface FilmsApiGetFilmsApiV1FilmsGetRequest
 */
export interface FilmsApiGetFilmsApiV1FilmsGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof FilmsApiGetFilmsApiV1FilmsGet
     */
    readonly imdbIds?: Array<string>
}

/**
 * Request parameters for searchApiV1FilmsSearchGet operation in FilmsApi.
 * @export
 * @interface FilmsApiSearchApiV1FilmsSearchGetRequest
 */
export interface FilmsApiSearchApiV1FilmsSearchGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FilmsApiSearchApiV1FilmsSearchGet
     */
    readonly query: string
}

/**
 * FilmsApi - object-oriented interface
 * @export
 * @class FilmsApi
 * @extends {BaseAPI}
 */
export class FilmsApi extends BaseAPI {
    /**
     * Create a new film.  Args:     film_request: a `FilmIn` instance  Returns:     a `Film` object
     * @summary Create Film
     * @param {FilmsApiCreateFilmApiV1FilmsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilmsApi
     */
    public createFilmApiV1FilmsPost(requestParameters: FilmsApiCreateFilmApiV1FilmsPostRequest, options?: AxiosRequestConfig) {
        return FilmsApiFp(this.configuration).createFilmApiV1FilmsPost(requestParameters.filmIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Filter films by multiple `imdb_id`.  Args:     imdb_ids: a list of `imdb_id` queries  Returns:     a list of filtered `Film` objects
     * @summary Get Films
     * @param {FilmsApiGetFilmsApiV1FilmsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilmsApi
     */
    public getFilmsApiV1FilmsGet(requestParameters: FilmsApiGetFilmsApiV1FilmsGetRequest = {}, options?: AxiosRequestConfig) {
        return FilmsApiFp(this.configuration).getFilmsApiV1FilmsGet(requestParameters.imdbIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for a film from a given query.  Args:     query: the query string  Returns:     a list of search results
     * @summary Search
     * @param {FilmsApiSearchApiV1FilmsSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilmsApi
     */
    public searchApiV1FilmsSearchGet(requestParameters: FilmsApiSearchApiV1FilmsSearchGetRequest, options?: AxiosRequestConfig) {
        return FilmsApiFp(this.configuration).searchApiV1FilmsSearchGet(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
}
